"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.publish = exports.unsubscribe = exports.subscribe = exports.initialiseRedisPubsubClients = void 0;
var redis = require("redis");
var lodash_1 = require("lodash");
var subscriber, publisher;
var connections = {};
var initialiseRedisPubsubClients = function (url) {
    subscriber = redis.createClient(url);
    publisher = redis.createClient(url);
    subscriber.on('message', function (channel, message) {
        var callbacks = connections[channel];
        Object.values(callbacks).forEach(function (c) { return c(message); });
    });
};
exports.initialiseRedisPubsubClients = initialiseRedisPubsubClients;
var subscribe = function (subscriptionName, subscriptionId, callback) {
    var _a;
    connections[subscriptionName] = __assign(__assign({}, connections[subscriptionName]), (_a = {}, _a[subscriptionId] = callback, _a));
    if (Object.keys(connections[subscriptionName]).length === 1) {
        subscriber.subscribe(subscriptionName);
    }
};
exports.subscribe = subscribe;
var unsubscribe = function (subscriptionName, subscriptionId) {
    connections[subscriptionName] = lodash_1.omit(connections[subscriptionName], subscriptionId);
    if (lodash_1.isEmpty(connections)) {
        subscriber.unsubscribe(subscriptionName);
    }
};
exports.unsubscribe = unsubscribe;
var publish = function (subscriptionName, message) {
    publisher.publish(subscriptionName, message);
};
exports.publish = publish;
//# sourceMappingURL=pubsub.js.map