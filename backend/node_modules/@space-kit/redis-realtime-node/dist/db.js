"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readDbKeys = exports.createDbPathIfNotExists = exports.readDb = exports.writeToDb = exports.publishToDb = exports.subscribeToDb = void 0;
var redis_1 = require("./core/redis");
var json_1 = require("./core/redis/json");
var subscribeToDb = function (id, db, callback) {
    redis_1.subscribe("db/" + db, id, function (message) {
        var data = JSON.parse(message);
        if (data.id !== id) {
            callback(message);
        }
    });
};
exports.subscribeToDb = subscribeToDb;
var publishToDb = function (db, message) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                redis_1.publish("db/" + db, JSON.stringify(message));
                return [4 /*yield*/, exports.writeToDb(db, message.type, message.key, message.data)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
exports.publishToDb = publishToDb;
var writeToDb = function (db, type, key, value) { return __awaiter(void 0, void 0, void 0, function () {
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                console.log('Write', db, type, key, value);
                _a = type;
                switch (_a) {
                    case 'DB_ARRAY_INSERT': return [3 /*break*/, 1];
                    case 'DB_ARRAY_POP': return [3 /*break*/, 4];
                    case 'DB_SET': return [3 /*break*/, 5];
                    case 'DB_DEL': return [3 /*break*/, 6];
                }
                return [3 /*break*/, 7];
            case 1:
                if (!value.id) return [3 /*break*/, 3];
                return [4 /*yield*/, exports.createDbPathIfNotExists(db, key, '[]')];
            case 2:
                _b.sent();
                return [2 /*return*/, json_1.insertArrayJSON(db, "." + key, 0, JSON.stringify(value))];
            case 3: return [2 /*return*/];
            case 4:
                if (value.id !== null && value.index !== null) {
                    return [2 /*return*/, json_1.safePopArrayJSON(db, key, value.id, value.index)];
                }
                return [2 /*return*/];
            case 5: return [2 /*return*/, redis_1.setJson(db, "." + key, JSON.stringify(value))];
            case 6: return [2 /*return*/, json_1.delJson(db, "." + key)];
            case 7: return [2 /*return*/];
        }
    });
}); };
exports.writeToDb = writeToDb;
var readDb = function (db, key) {
    return redis_1.getJson(db, "." + key);
};
exports.readDb = readDb;
var createDbPathIfNotExists = function (db, path, defaultValue) {
    if (path === void 0) { path = ''; }
    if (defaultValue === void 0) { defaultValue = '{}'; }
    return __awaiter(void 0, void 0, void 0, function () {
        var isExist, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    isExist = false;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, exports.readDb(db, "" + path)];
                case 2:
                    if (_a.sent()) {
                        isExist = true;
                    }
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _a.sent();
                    return [3 /*break*/, 4];
                case 4:
                    if (!!isExist) return [3 /*break*/, 6];
                    return [4 /*yield*/, redis_1.setJson(db, "." + path, defaultValue)];
                case 5:
                    _a.sent();
                    _a.label = 6;
                case 6: return [2 /*return*/];
            }
        });
    });
};
exports.createDbPathIfNotExists = createDbPathIfNotExists;
var readDbKeys = function (db, keys) {
    return keys.reduce(function (acc, key) { return __awaiter(void 0, void 0, void 0, function () {
        var data, _a;
        var _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, exports.readDb(db, key)];
                case 1:
                    data = _c.sent();
                    _a = [{}];
                    return [4 /*yield*/, acc];
                case 2: return [2 /*return*/, __assign.apply(void 0, [__assign.apply(void 0, _a.concat([(_c.sent())])), (_b = {}, _b[key] = JSON.parse(data), _b)])];
            }
        });
    }); }, {});
};
exports.readDbKeys = readDbKeys;
//# sourceMappingURL=db.js.map