"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var json_1 = require("./core/redis/json");
var pubsub_1 = require("./core/redis/pubsub");
var socket_1 = require("./core/socket");
var db_1 = require("./db");
var logger_1 = require("./logger");
var serverConnectionCallback = function (ws, _a) {
    var id = _a.id, db = _a.db;
    var sendJSON = function (message) {
        ws.send(JSON.stringify(message));
    };
    logger_1.default.debug("New client connected to db:" + db + " id: " + id);
    sendJSON({ type: 'HANDSHAKE_SUCCESS', id: id, db: db });
    db_1.subscribeToDb(id, db, function (message) {
        ws.send(message);
    });
    ws.on('message', function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var data, details, err_1, err_2, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 10, , 11]);
                        data = JSON.parse(message);
                        if (!(data.type === 'DB_INITIALISE')) return [3 /*break*/, 5];
                        details = {};
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, db_1.readDbKeys(db, data.keys)
                            // eslint-disable-next-line no-empty
                        ];
                    case 2:
                        details = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4:
                        sendJSON({
                            type: 'DB_INITIALISE',
                            keys: data.keys,
                            datas: details,
                        });
                        return [3 /*break*/, 9];
                    case 5:
                        if (!['DB_SET', 'DB_ARRAY_INSERT', 'DB_ARRAY_POP', 'DB_DEL'].includes(data.type)) return [3 /*break*/, 9];
                        _a.label = 6;
                    case 6:
                        _a.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, db_1.publishToDb(db, data)];
                    case 7:
                        _a.sent();
                        return [3 /*break*/, 9];
                    case 8:
                        err_2 = _a.sent();
                        console.log('Pubish:', err_2);
                        return [3 /*break*/, 9];
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        err_3 = _a.sent();
                        console.log("Error processing webhook message from " + id, err_3);
                        return [3 /*break*/, 11];
                    case 11: return [2 /*return*/];
                }
            });
        });
    });
};
socket_1.socketServer.on('connection', serverConnectionCallback);
var redisRealtime = function (server, url, db) {
    pubsub_1.initialiseRedisPubsubClients(url);
    json_1.initialiseRedisJsonClient(url);
    db_1.createDbPathIfNotExists(db).then(function () { });
    server.on('upgrade', function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                logger_1.default.debug("New connection intiating");
                socket_1.connectClient(args, db);
                return [2 /*return*/];
            });
        });
    });
};
exports.default = redisRealtime;
//# sourceMappingURL=index.js.map